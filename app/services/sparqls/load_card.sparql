# load_card query is used to load the card data for dereferencing a given URI
# If there is a nested location, then the location name is flattened.
# If there is a nested address, then the postalCode and addressLocality is flattened.
# Flatenning is done to make the data more readable and to avoid nested objects in the card.

PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX schema: <http://schema.org/>
PREFIX prov: <http://www.w3.org/ns/prov#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>

construct { 
  ?entity rdfs:label ?c ; 
    a ?type ; 
  schema:additionalType ?inferred_type ;
  schema:disambiguatingDescription ?disambiguatingDescription ;
  schema:streetAddress ?street  ;  
  schema:addressLocality ?locality ;  
  schema:postalCode ?postalCode ;
  schema:startDate ?startDate ;
  schema:endDate ?endDate ;
  schema:location ?place_name ;
  prov:wasDerivedFrom ?g .
} 
where { 
  VALUES ?entity { <URI_PLACEHOLDER> }
  OPTIONAL { ?entity rdfs:label ?c .}
  MINUS { ?entity skos:hiddenLabel ?c . }   
  OPTIONAL { ?entity schema:disambiguatingDescription ?disambiguatingDescription .}
  ?entity a ?inferred_type .
  graph ?g { 
    OPTIONAL { ?entity a ?type .}
   
    # When entity is an Event
    OPTIONAL { ?entity schema:startDate ?startDate .} 
    OPTIONAL { ?entity schema:endDate ?endDate .}    
    # When entity is a PostalAddress
    OPTIONAL { ?entity schema:streetAddress ?street .} 
    OPTIONAL { ?entity schema:addressLocality ?locality .} 
    OPTIONAL { ?entity schema:postalCode ?postalCode .} 
  }
  
  # When entity is an Event then flatten nested location and PostalAddress
  OPTIONAL { ?entity schema:location/schema:name ?place_name .}
  OPTIONAL { ?entity schema:location/schema:address/schema:postalCode ?postalCode .}
  # When entity is a Place then flatten nested PostalAdress
  OPTIONAL { ?entity schema:address/schema:postalCode ?postalCode . }
  OPTIONAL { ?entity  schema:address/schema:addressLocality ?locality . }
} 